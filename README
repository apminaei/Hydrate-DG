Preparing the Sources
=========================

Additional to the software mentioned in README you'll need the
following programs installed on your system:

  cmake >= 2.8.12

Getting started
---------------

If these preliminaries are met, you should run

  dunecontrol all

which will find all installed dune modules as well as all dune modules
(not installed) which sources reside in a subdirectory of the current
directory. Note that if dune is not installed properly you will either
have to add the directory where the dunecontrol script resides (probably
./dune-common/bin) to your path or specify the relative path of the script.

Most probably you'll have to provide additional information to dunecontrol
(e. g. compilers, configure options) and/or make options.

The most convenient way is to use options files in this case. The files
define four variables:

CMAKE_FLAGS      flags passed to cmake (during configure)
MAKE_FLAGS       flags passed to make

An example options file might look like this:

#use this options to configure and make if no other options are given
CMAKE_FLAGS=" \
-DCMAKE_CXX_COMPILER=g++-4.9 \
-DCMAKE_CXX_FLAGS='-Wall -pedantic' \
-DCMAKE_INSTALL_PREFIX=/install/path" #Force g++-4.9 and set compiler flags
MAKE_FLAGS=install #Per default run make install instead of simply make

If you save this information into example.opts you can pass the opts file to
dunecontrol via the --opts option, e. g.

  dunecontrol --opts=example.opts all

More info
---------

See

     dunecontrol --help

for further options.


The full build system is described in the dune-common/doc/buildsystem (Git version) or under share/doc/dune-common/buildsystem if you installed DUNE!


############################################### How to use this code? ###################################################
This code requires DUNE-PDELab version > 2.7, which is an open-source toolbox for solving systems of partial differential equations, available freely at: https://gitlab.dune-project.org/pdelab/

The source code depends on following dune modules: common, grid, geometry, istl, localfunctions, uggrid, alugrid, grid, functions, typetree, pdelab.
After installation of these modules, the necessary libraries are included in the source code through includeDUNE.hh.

- source file including main program for each simulation scenario is in the src folder.
- driver.hh defines function space and solvers needed for each simulation scenario and is included in Hydrate-DG/dune/Hydrate-DG/CorrespondingScenario
- whithin each folder of simulation scenarios there exist following folders:
  - properties: include material properties
  - grid: include domain discretization, boundaries
  - input: include input data such as numerical parameters, initial and boundary conditions, ...
  

############################################### Numerical Setting #######################################################

1. BM_phasechange_0d : Artifitially designed example to validate phase change for our numerical scheme
2. 1D scenario are simulated with a pre-existing hydrate layer located at GHSZ. 
  This simulation test is considered to show MHR proces in a homogeneous geological setting.

3. 2D scenarios are simulated to show the impact of existence of an anomalous material layer within geological setting.

